{"mappings":"ACCA,SAAS,EAAU,CAAI,EACrB,OAAO,EACJ,GAAG,CACF,AAAC,GACC,CAAC;uCAC8B,EAAE,EAAK,IAAI,CAAC;wCACX,EAAE,EAAK,UAAU,CAAC;2CACf,EAAE,EAAK,WAAW,CAAC;iBAC7C,CAAC,EAEb,IAAI,CAAC,GACV,CAGA,OAAO,MAAM,CAAG,EAEhB,IAAI,EAAO,GAKX,eAAe,IACb,GAAI,CACF,IAAM,EAAa,MAAM,MACvB,+CAEF,EAAO,MAAM,EAAW,IAAI,GAE5B,SAAS,cAAc,CAAC,cAAc,SAAS,CAAG,EAAU,EAC9D,CAAE,KAAM,CACN,SAAS,cAAc,CACrB,cACA,SAAS,CAAG,yDAChB,CACF,CAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAI5C,IAAM,EAAc,SAAS,cAAc,CAAC,gBACtC,EAAc,SAAS,cAAc,CAAC,cAG5C,EAAY,gBAAgB,CAAC,QAAS,SAgBjB,EAfnB,IAAI,EAAa,EAAY,KAAK,CAAC,WAAW,GAe3B,EAbF,EAAK,MAAM,CAC1B,AAAC,GAEC,EAAK,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,IAEjC,EAAK,UAAU,CAAC,WAAW,GAAG,QAAQ,CAAC,IAEvC,EAAK,WAAW,CAAC,WAAW,GAAG,QAAQ,CAAC,IAQ5C,EAAY,SAAS,CAAG,GAEpB,AAAsB,IAAtB,EAAW,MAAM,CACnB,SAAS,cAAc,CACrB,cACA,SAAS,CAAG,CAAC,kEAAyD,CAAC,CAGzE,SAAS,cAAc,CAAC,cAAc,SAAS,CAAG,EAAU,EAZhE,GAoBA,IAAM,EAAY,CAAE,EAAG,MAAO,EAAG,MAAO,EAAG,KAAM,EAuBjD,SAAS,EAAS,CAAM,CAAE,CAAK,EAC7B,IAAM,EAAa,EAAK,IAAI,CAAC,CAAC,EAAG,KAC/B,IAAM,EAAW,OAAO,MAAM,CAAC,EAAE,CAAC,EAAO,CAAC,WAAW,GAC/C,EAAY,OAAO,MAAM,CAAC,EAAE,CAAC,EAAO,CAAC,WAAW,GACtD,MAAO,AAAU,QAAV,EACH,EAAS,aAAa,CAAC,GACvB,EAAU,aAAa,CAAC,EAC9B,EAGA,CAAA,SAAS,cAAc,CAAC,cAAc,SAAS,CAAG,EAAU,EAC9D,CA/BA,SAAS,gBAAgB,CAAC,gBAAgB,OAAO,CAAC,AAAC,IACjD,EAAO,gBAAgB,CAAC,QAAS,SAAU,CAAC,EAC1C,EAAE,cAAc,GAChB,IAAM,EAAS,IAAI,CAAC,YAAY,CAAC,eACjC,EAAS,EAAQ,CAAS,CAAC,EAAO,EAElC,CAAS,CAAC,EAAO,CAAG,AAAsB,QAAtB,CAAS,CAAC,EAAO,CAAa,OAAS,KAC7D,EACF,GAGA,SAAS,gBAAgB,CAAC,gBAAgB,OAAO,CAAC,AAAC,IACjD,EAAO,gBAAgB,CAAC,SAAU,WAGhC,EAFe,IAAI,CAAC,YAAY,CAAC,eACnB,IAAI,CAAC,KAAK,CAE1B,EACF,EAeF","sources":["<anon>","src/js/main.js"],"sourcesContent":["var $54b47fc030b7b21e$exports = {};\n// Skapar tabellraderna\nfunction $54b47fc030b7b21e$var$tableRows(data) {\n    return data.map((item)=>`<tr>\r\n              <td data-title=\"Kurskod\">${item.code}</td>\r\n              <td data-title=\"Kursnamn\">${item.coursename}</td>\r\n              <td data-title=\"Progression\">${item.progression}</td>\r\n            </tr>`).join(\"\");\n}\n// Fyller 'data' och skriver ut tabellen vid start\nwindow.onload = $54b47fc030b7b21e$var$loadCourses;\nlet $54b47fc030b7b21e$var$data = \"\";\n// ------------------------------------------------------------------------------------------------\n// TABELLSTART ------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------ TABELLSTART\nasync function $54b47fc030b7b21e$var$loadCourses() {\n    try {\n        const datasource = await fetch(\"https://dahlgren.miun.se/ramschema_ht23.php\");\n        $54b47fc030b7b21e$var$data = await datasource.json();\n        // Skriver ut tabellen\n        document.getElementById(\"table-data\").innerHTML = $54b47fc030b7b21e$var$tableRows($54b47fc030b7b21e$var$data);\n    } catch  {\n        document.getElementById(\"table-data\").innerHTML = `<tr><td colspan=\"3\">Kunde inte ladda data ...</td></tr>`;\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // ------------------------------------------------------------------------------------------------\n    // SÖKUNKTIONEN -----------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------- SÖKFUNKTIONEN\n    const searchInput = document.getElementById(\"search-input\");\n    const resultTable = document.getElementById(\"table-data\");\n    // Hämtar ut vad som skrivs in i sökrutan och omvandlar till lower case\n    searchInput.addEventListener(\"input\", ()=>{\n        let searchTerm = searchInput.value.toLowerCase();\n        // Söker igenom data baserat på vad osm skrivits in och fyller 'filterData'\n        let filterData = $54b47fc030b7b21e$var$data.filter((item)=>// OM kurskoden\n            item.code.toLowerCase().includes(searchTerm) || // ELLER kursnamnet\n            item.coursename.toLowerCase().includes(searchTerm) || // ELLER progression\n            item.progression.toLowerCase().includes(searchTerm));\n        // Uppdaterar tabellen\n        updateTable(filterData);\n    });\n    function updateTable(filterData) {\n        // Tömmer tabellen\n        resultTable.innerHTML = \"\";\n        // Finns det ingen träff så meddelar vi det\n        if (filterData.length === 0) document.getElementById(\"table-data\").innerHTML = `<tr><td colspan=\"3\">Ingen tr\\xe4ff p\\xe5 s\\xf6kordet ...</td></tr>`;\n        else // ANNARS skriver vi ut det\n        document.getElementById(\"table-data\").innerHTML = $54b47fc030b7b21e$var$tableRows(filterData);\n    }\n    // ------------------------------------------------------------------------------------------------\n    // SORTERA ----------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------- SORTERA\n    // Första sorteringsordning på kolumner , använder \"data-*\"-attributet för att göra dem unika\n    const sortOrder = {\n        0: \"asc\",\n        1: \"asc\",\n        2: \"asc\"\n    };\n    // Klick på rubriker\n    document.querySelectorAll(\".sort-header\").forEach((header)=>{\n        header.addEventListener(\"click\", function(e) {\n            e.preventDefault();\n            const column = this.getAttribute(\"data-column\");\n            dataSort(column, sortOrder[column]);\n            // Växlar sorteringsordningen\n            sortOrder[column] = sortOrder[column] === \"asc\" ? \"desc\" : \"asc\";\n        });\n    });\n    // I mobilt läge - select med options (asc och desc)\n    document.querySelectorAll(\".sort-select\").forEach((select)=>{\n        select.addEventListener(\"change\", function() {\n            const column = this.getAttribute(\"data-column\");\n            const order = this.value;\n            dataSort(column, order);\n        });\n    });\n    // Sorterar data\n    function dataSort(column, order) {\n        const sortedData = $54b47fc030b7b21e$var$data.sort((a, b)=>{\n            const firstVal = Object.values(a)[column].toLowerCase();\n            const secondVal = Object.values(b)[column].toLowerCase();\n            return order === \"asc\" ? firstVal.localeCompare(secondVal) : secondVal.localeCompare(firstVal);\n        });\n        // Skriver ut sorterad data till tabellen\n        document.getElementById(\"table-data\").innerHTML = $54b47fc030b7b21e$var$tableRows(sortedData);\n    }\n});\n\n\n//# sourceMappingURL=index.01ea2d70.js.map\n","// Skapar tabellraderna\r\nfunction tableRows(data) {\r\n  return data\r\n    .map(\r\n      (item) =>\r\n        `<tr>\r\n              <td data-title=\"Kurskod\">${item.code}</td>\r\n              <td data-title=\"Kursnamn\">${item.coursename}</td>\r\n              <td data-title=\"Progression\">${item.progression}</td>\r\n            </tr>`\r\n    )\r\n    .join(\"\");\r\n}\r\n\r\n// Fyller 'data' och skriver ut tabellen vid start\r\nwindow.onload = loadCourses;\r\n\r\nlet data = \"\";\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n// TABELLSTART ------------------------------------------------------------------------------------\r\n// ------------------------------------------------------------------------------------ TABELLSTART\r\nasync function loadCourses() {\r\n  try {\r\n    const datasource = await fetch(\r\n      \"https://dahlgren.miun.se/ramschema_ht23.php\"\r\n    );\r\n    data = await datasource.json();\r\n    // Skriver ut tabellen\r\n    document.getElementById(\"table-data\").innerHTML = tableRows(data);\r\n  } catch {\r\n    document.getElementById(\r\n      \"table-data\"\r\n    ).innerHTML = `<tr><td colspan=\"3\">Kunde inte ladda data ...</td></tr>`;\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  // ------------------------------------------------------------------------------------------------\r\n  // SÖKUNKTIONEN -----------------------------------------------------------------------------------\r\n  // ---------------------------------------------------------------------------------- SÖKFUNKTIONEN\r\n  const searchInput = document.getElementById(\"search-input\");\r\n  const resultTable = document.getElementById(\"table-data\");\r\n\r\n  // Hämtar ut vad som skrivs in i sökrutan och omvandlar till lower case\r\n  searchInput.addEventListener(\"input\", () => {\r\n    let searchTerm = searchInput.value.toLowerCase();\r\n    // Söker igenom data baserat på vad osm skrivits in och fyller 'filterData'\r\n    let filterData = data.filter(\r\n      (item) =>\r\n        // OM kurskoden\r\n        item.code.toLowerCase().includes(searchTerm) ||\r\n        // ELLER kursnamnet\r\n        item.coursename.toLowerCase().includes(searchTerm) ||\r\n        // ELLER progression\r\n        item.progression.toLowerCase().includes(searchTerm)\r\n    );\r\n    // Uppdaterar tabellen\r\n    updateTable(filterData);\r\n  });\r\n\r\n  function updateTable(filterData) {\r\n    // Tömmer tabellen\r\n    resultTable.innerHTML = \"\";\r\n    // Finns det ingen träff så meddelar vi det\r\n    if (filterData.length === 0) {\r\n      document.getElementById(\r\n        \"table-data\"\r\n      ).innerHTML = `<tr><td colspan=\"3\">Ingen träff på sökordet ...</td></tr>`;\r\n    } else {\r\n      // ANNARS skriver vi ut det\r\n      document.getElementById(\"table-data\").innerHTML = tableRows(filterData);\r\n    }\r\n  }\r\n  // ------------------------------------------------------------------------------------------------\r\n  // SORTERA ----------------------------------------------------------------------------------------\r\n  // ---------------------------------------------------------------------------------------- SORTERA\r\n\r\n  // Första sorteringsordning på kolumner , använder \"data-*\"-attributet för att göra dem unika\r\n  const sortOrder = { 0: \"asc\", 1: \"asc\", 2: \"asc\" };\r\n\r\n  // Klick på rubriker\r\n  document.querySelectorAll(\".sort-header\").forEach((header) => {\r\n    header.addEventListener(\"click\", function (e) {\r\n      e.preventDefault();\r\n      const column = this.getAttribute(\"data-column\");\r\n      dataSort(column, sortOrder[column]);\r\n      // Växlar sorteringsordningen\r\n      sortOrder[column] = sortOrder[column] === \"asc\" ? \"desc\" : \"asc\";\r\n    });\r\n  });\r\n\r\n  // I mobilt läge - select med options (asc och desc)\r\n  document.querySelectorAll(\".sort-select\").forEach((select) => {\r\n    select.addEventListener(\"change\", function () {\r\n      const column = this.getAttribute(\"data-column\");\r\n      const order = this.value;\r\n      dataSort(column, order);\r\n    });\r\n  });\r\n\r\n  // Sorterar data\r\n  function dataSort(column, order) {\r\n    const sortedData = data.sort((a, b) => {\r\n      const firstVal = Object.values(a)[column].toLowerCase();\r\n      const secondVal = Object.values(b)[column].toLowerCase();\r\n      return order === \"asc\"\r\n        ? firstVal.localeCompare(secondVal)\r\n        : secondVal.localeCompare(firstVal);\r\n    });\r\n\r\n    // Skriver ut sorterad data till tabellen\r\n    document.getElementById(\"table-data\").innerHTML = tableRows(sortedData);\r\n  }\r\n});\r\n"],"names":["$54b47fc030b7b21e$var$tableRows","data","map","item","code","coursename","progression","join","window","onload","$54b47fc030b7b21e$var$loadCourses","$54b47fc030b7b21e$var$data","datasource","fetch","json","document","getElementById","innerHTML","addEventListener","searchInput","resultTable","filterData","searchTerm","value","toLowerCase","filter","includes","length","sortOrder","dataSort","column","order","sortedData","sort","a","b","firstVal","Object","values","secondVal","localeCompare","querySelectorAll","forEach","header","e","preventDefault","getAttribute","select"],"version":3,"file":"index.01ea2d70.js.map"}